labs(title = "Kospi200 & V-Kospi200 indices",x = "Dates",color = "Index") +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = VKOSPI200 * 10, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(~ . / 10, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = "Dates",color = "Index") +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19.6) / (44 - 19.6) * (360 - 300) + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / (360 - 300) * (44 - 19.6) + 19.6, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = "Dates",color = "Index") +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(idx_raw)
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / (45 - 19) * (360 - 300) + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / (360 - 300) * (45 - 19) + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = "Dates",color = "Index") +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = "Dates",color = "Index") +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = "Dates",color = "Index") +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(0.85, 0.85))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red")) +
labs(title = "Kospi200 & V-Kospi200 indices") +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(0.85, 0.85))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = NULL,color = NULL) +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(0.85, 0.85))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red"),
guide = guide_legend(direction = "horizontal")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = NULL,color = NULL) +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(0.85, 0.85))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red"),
guide = guide_legend(direction = "horizontal")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = NULL,color = NULL) +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(0.5, 0.85))
ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red"),
guide = guide_legend(direction = "horizontal")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = NULL,color = NULL) +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(0.5, 0.95))
View(table2)
View(table1)
View(portfolio)
View(portfolio2)
View(target_info2)
View(table1)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
library(tidyverse)
library(knitr)
library(patchwork)
# 1. 원본데이터 준비
options_raw <- read_csv("options_data_test.csv") %>% tibble()
idx_raw <- read_csv("idx_data_test.csv") %>% tibble()
mmf_raw <- read_csv("mmf_test.csv") %>% tibble()
# 2-1. 데이터 전처리 : KRX openAPI 옵션데이터 전처리
options <- options_raw %>%
# K200, WK200 이외의 옵션 제외
filter(substr(PROD_NM,1,3)=="코스피") %>%
# 종가가 없는 경우 익일 기준가격(이론가격) 사용
mutate(PRICE = as.double(if_else(TDD_CLSPRC=="-",NXTDD_BAS_PRC,TDD_CLSPRC))) %>%
drop_na(PRICE) %>%
select(BAS_DD,ISU_NM,PRICE,ACC_TRDVOL) %>%
separate(ISU_NM, into=c("PROD","RGHT","EXP","EXER_PRC"), sep=' ') %>%
mutate(EXER_PRC=as.double(EXER_PRC),
EXPMM=if_else(PROD=="코스피200",substr(EXP,3,6),substr(EXP,1,4)),
EXPWW=if_else(PROD=="코스피200",2,as.integer(substr(EXP,6,6)))) %>%
filter(EXER_PRC>min(idx_raw$KOSPI200)*0.85,
EXER_PRC<max(idx_raw$KOSPI200)*1.15,
PROD!="코스피위클리M") %>% # 월요일 만기 위클리옵션 제외
mutate(PRIOR=as.integer(EXPMM)*10+EXPWW) # 만기가 짧은 순으로 우선순위 부여
# 2-2. 데이터 전처리 : 옵션 만기일 데이터 생성
target_date <- options %>%
distinct(.,BAS_DD, PRIOR) %>%
arrange(PRIOR, desc(BAS_DD)) %>%
group_by(PRIOR) %>%
slice(1) %>%
ungroup() %>%
distinct(BAS_DD) %>%
arrange(desc(BAS_DD)) %>%
filter(BAS_DD<20250411)
# 2-3. 데이터 전처리 : KRX 정보데이터시스템 K200 및 V-K200지수 전처리
idx_data <- idx_raw %>%
arrange(BAS_DD) %>%
mutate(LAG_K200=lag(KOSPI200),
LAG_VK200=lag(VKOSPI200))
K200_portfolio=idx_data %>%
left_join(mmf_raw, by="BAS_DD") %>%
mutate(RATE=(KOSPI200-LAG_K200)/LAG_K200,
YEAR = substr(BAS_DD, 1, 4),
YM = ym(substr(BAS_DD, 1, 6))) %>%
group_by(YEAR) %>%
filter(is.na(RATE)==FALSE) %>%
summarise(RATE_K200 = prod(1 + RATE),
MMF = mean(MMF)/100,
.groups = "drop") %>%
ungroup()
# 3-1. 포트폴리오 구성 : VW양매도 포트폴리오 기초정보 생성
target_info <- target_date %>%
left_join(options, by="BAS_DD") %>%
distinct(BAS_DD,PRIOR) %>%
arrange(desc(BAS_DD),PRIOR) %>%
group_by(BAS_DD) %>%
# 만기가 도래하는 옵션을 제외하고 우선순위가 높은 옵션 선택
slice(2) %>%
ungroup() %>%
arrange(desc(BAS_DD)) %>%
left_join(idx_data, by="BAS_DD") %>%
left_join(mmf_raw, by="BAS_DD") %>%
# 옵션 보유기간 및 단기금리(MMF) 계산
mutate(DIFF_DAY=as.integer(ymd(lag(BAS_DD))-ymd(BAS_DD)),
MMF=MMF*0.01) %>%
# 옵션 보유기간에 해당하는 시장기대변동성 계산(V-K200활용)
mutate(VOL=LAG_VK200*sqrt(DIFF_DAY)/sqrt(365)/100) %>%
# 변동성에 따른 옵션 행사가격 상단(2.5단위 올림) 및 하단(2.5단위 내림) 계산
mutate(TARGET_C_K=ceiling(KOSPI200*(1+VOL)*0.4)/0.4,
TARGET_P_K=floor(KOSPI200*(1-VOL)*0.4)/0.4) %>%
# drop_na(DIFF_DAY) %>%
select(BAS_DD,VOL,DIFF_DAY,MMF,KOSPI200,LAG_VK200,PRIOR,TARGET_C_K,TARGET_P_K)
# 3-2. 포트폴리오 구성 : VW양매도 포트폴리오 거래대상 옵션 정보 생성
target_options <- target_info %>%
select(BAS_DD, PRIOR, TARGET_C_K, TARGET_P_K) %>%
pivot_longer(cols=c("TARGET_C_K","TARGET_P_K"),names_to = "GRP", values_to = "EXER_PRC") %>%
mutate(RGHT=substr(GRP,8,8)) %>%
left_join(options,by=c("BAS_DD","PRIOR","RGHT","EXER_PRC")) %>%
select(BAS_DD,GRP,PRICE,ACC_TRDVOL) %>%
pivot_wider(names_from = "GRP", values_from = c("PRICE","ACC_TRDVOL"))
# 원금 100억원 가정
cash = 10000*10000*100
# 4. 포트폴리오 구현 : VW양매도 전략을 구현하여 일자별 손익 계산
portfolio <- target_info %>%
left_join(target_options,by="BAS_DD") %>%
arrange(BAS_DD) %>%
# 원금에 따른 옵션 매도수량 계산
mutate(SELL_AMT=cash/250000/KOSPI200) %>%
# 옵션 프리미엄(매도수익)) 계산
mutate(PREMIUM=SELL_AMT*(PRICE_TARGET_C_K+PRICE_TARGET_P_K)*250000) %>%
# 원금 및 프리미엄의 MMF 이자수익 및 권리행사손실 계산
mutate(INTEREST=(cash+replace_na(PREMIUM,0))*MMF*DIFF_DAY/365,
EXERCISE=(if_else(lead(KOSPI200)-TARGET_C_K>0,lead(KOSPI200)-TARGET_C_K,0)+
if_else(TARGET_P_K-lead(KOSPI200)>0,TARGET_P_K-lead(KOSPI200),0))*250000*SELL_AMT) %>%
# 주단위 포트폴리오 손익 계산(원금 100억 가정, 당일 투자시 다음주 실현손익을 의미)
mutate(REVENUE=PREMIUM+INTEREST-EXERCISE) %>%
# 거래대상 옵션이 상장되어있지 않은 경우, MMF수익만 고려
mutate(REVENUE=if_else(is.na(REVENUE),INTEREST,REVENUE)) %>%
mutate(RATE=REVENUE/cash,
Group="Vol-adj. Weekly")  # 주단위 포트폴리오 수익률
# 5. 비교군 포트폴리오 생성 : 월별 5% OTM 양매도 전략
options2 <- options %>%
filter(PROD=="코스피200")
# 옵션 만기일(매달) 생성
target_date2 <- options2 %>%
distinct(.,BAS_DD, PRIOR) %>%
arrange(PRIOR, desc(BAS_DD)) %>%
group_by(PRIOR) %>%
slice(1) %>%
ungroup() %>%
distinct(BAS_DD) %>%
arrange(desc(BAS_DD)) %>%
filter(BAS_DD<20250411)
# 일반 양매도 포트폴리오 기본 정보 생성
target_info2 <- target_date2 %>%
left_join(options2, by="BAS_DD") %>%
distinct(BAS_DD,PRIOR) %>%
arrange(desc(BAS_DD),PRIOR) %>%
group_by(BAS_DD) %>%
# 만기가 도래하는 옵션을 제외하고 우선순위가 높은 옵션 선택
slice(2) %>%
ungroup() %>%
arrange(desc(BAS_DD)) %>%
left_join(idx_data, by="BAS_DD") %>%
left_join(mmf_raw, by="BAS_DD") %>%
# 옵션 보유기간 및 단기금리(MMF) 계산
mutate(DIFF_DAY=as.integer(ymd(lag(BAS_DD))-ymd(BAS_DD)),
MMF=MMF*0.01,
VOL=0.05) %>%
# 변동성에 따른 옵션 행사가격 상단(2.5단위 올림) 및 하단(2.5단위 내림) 계산
mutate(TARGET_C_K=ceiling(KOSPI200*(1+VOL)*0.4)/0.4,
TARGET_P_K=floor(KOSPI200*(1-VOL)*0.4)/0.4) %>%
mutate(DIFF_DAY=if_else(is.na(DIFF_DAY),28,DIFF_DAY)) %>%
select(BAS_DD,VOL,DIFF_DAY,MMF,KOSPI200,LAG_VK200,PRIOR,TARGET_C_K,TARGET_P_K)
# 일반 양매도 포트폴리오 거래대상 옵션
target_options2 <- target_info2 %>%
select(BAS_DD, PRIOR, TARGET_C_K, TARGET_P_K) %>%
pivot_longer(cols=c("TARGET_C_K","TARGET_P_K"),names_to = "GRP", values_to = "EXER_PRC") %>%
mutate(RGHT=substr(GRP,8,8)) %>%
left_join(options2,by=c("BAS_DD","PRIOR","RGHT","EXER_PRC")) %>%
select(BAS_DD,GRP,PRICE,ACC_TRDVOL) %>%
pivot_wider(names_from = "GRP", values_from = c("PRICE","ACC_TRDVOL"))
# 일반 양매도 포트폴리오 구현
portfolio2 <- target_info2 %>%
left_join(target_options2,by="BAS_DD") %>%
arrange(BAS_DD) %>%
# 원금에 따른 옵션 매도수량 계산
mutate(SELL_AMT=cash/250000/KOSPI200) %>%
# 옵션 프리미엄(매도수익)) 계산
mutate(PREMIUM=SELL_AMT*(PRICE_TARGET_C_K+PRICE_TARGET_P_K)*250000) %>%
# 원금 및 프리미엄의 MMF 이자수익 및 권리행사손실 계산
mutate(INTEREST=(cash+replace_na(PREMIUM,0))*MMF*DIFF_DAY/365,
EXERCISE=(if_else(lead(KOSPI200)-TARGET_C_K>0,lead(KOSPI200)-TARGET_C_K,0)+
if_else(TARGET_P_K-lead(KOSPI200)>0,TARGET_P_K-lead(KOSPI200),0))*250000*SELL_AMT) %>%
mutate(EXERCISE=if_else(is.na(EXERCISE),0,EXERCISE)) %>%
# 주단위 포트폴리오 손익 계산(원금 100억 가정, 당일 투자시 다음주 실현손익을 의미)
mutate(REVENUE=PREMIUM+INTEREST-EXERCISE) %>%
# 거래대상 옵션이 상장되어있지 않은 경우, MMF수익만 고려
mutate(REVENUE=if_else(is.na(REVENUE),INTEREST,REVENUE)) %>%
mutate(RATE=REVENUE/cash,
Group="Monthly") # 주단위 포트폴리오 수익률
portfolio <- portfolio %>% filter(BAS_DD!=20250410)
portfolio2 <- portfolio2 %>% filter(BAS_DD!=20250410)
portfolio3 <- portfolio %>%
summarise(across(where(is.numeric), sum)) %>%
mutate(Group="Vol-adj. Weekly Sum")
# 요약표 4 : 검증 자료
table4 <- portfolio %>%
union_all(portfolio2) %>%
union_all(portfolio3) %>%
group_by(BAS_DD, Group) %>%
summarise(Premium = round(mean(PREMIUM)/10000,0),
Interest = round(mean(INTEREST)/10000,0),
Loss = round(mean(EXERCISE)/10000,0),
Revenue = round(mean(REVENUE)/10000,0),
Return = round(prod(1 + RATE)-1,2),
.groups = "drop")
# 그래프 4 : 검증기간중 코스피200지수 추이
graph4 <- ggplot(idx_raw, aes(x = ymd(BAS_DD))) +
geom_line(aes(y = KOSPI200, color = "KOSPI200"), size = 1.2) +
geom_line(aes(y = (VKOSPI200 - 19) / 26 * 60 + 300, color = "VKOSPI200"), size = 1.2) +
geom_vline(xintercept = ymd(c("20250313", "20250320", "20250327", "20250403","20250410")),
linetype = "dotted", color = "grey40") +
scale_y_continuous(name = "KOSPI200",limits = c(300, 360),
sec.axis = sec_axis(
~ (.-300) / 60 * 26 + 19, name = "VKOSPI200")) +
scale_color_manual(values = c("KOSPI200" = "blue", "VKOSPI200" = "red"),
guide = guide_legend(direction = "horizontal")) +
labs(title = "Kospi200 & V-Kospi200 indices",x = NULL,color = NULL) +
theme_minimal() +
scale_x_date(date_breaks = "3 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(0.5, 0.95))
View(portfolio)
View(portfolio2)
csv(portfolio)
write_csv(portfolio)
?write_csv
write_csv(portfolio,file="portfolio_test")
write_csv(portfolio2,file="portfolio2_test")
rm(list=ls())
library(tidyverse)
library(knitr)
library(patchwork)
# 1. 원본데이터 준비
options_raw <- read_csv("data/options_data.csv") %>% tibble()
# 1. 원본데이터 준비
options_raw <- read_csv("options_data.csv") %>% tibble()
idx_raw <- read_csv("idx_data.csv") %>% tibble()
mmf_raw <- read_csv("mmf.csv") %>% tibble()
# 2-1. 데이터 전처리 : KRX openAPI 옵션데이터 전처리
options <- options_raw %>%
# K200, WK200 이외의 옵션 제외
filter(substr(PROD_NM,1,3)=="코스피") %>%
# 종가가 없는 경우 익일 기준가격(이론가격) 사용
mutate(PRICE = as.double(if_else(TDD_CLSPRC=="-",NXTDD_BAS_PRC,TDD_CLSPRC))) %>%
drop_na(PRICE) %>%
select(BAS_DD,ISU_NM,PRICE,ACC_TRDVOL) %>%
separate(ISU_NM, into=c("PROD","RGHT","EXP","EXER_PRC"), sep=' ') %>%
mutate(EXER_PRC=as.double(EXER_PRC),
EXPMM=if_else(PROD=="코스피200",substr(EXP,3,6),substr(EXP,1,4)),
EXPWW=if_else(PROD=="코스피200",2,as.integer(substr(EXP,6,6)))) %>%
filter(EXER_PRC>min(idx_raw$KOSPI200)*0.85,
EXER_PRC<max(idx_raw$KOSPI200)*1.15,
PROD!="코스피위클리M") %>% # 월요일 만기 위클리옵션 제외
mutate(PRIOR=as.integer(EXPMM)*10+EXPWW) # 만기가 짧은 순으로 우선순위 부여
# 2-2. 데이터 전처리 : 옵션 만기일 데이터 생성
target_date <- options %>%
distinct(.,BAS_DD, PRIOR) %>%
arrange(PRIOR, desc(BAS_DD)) %>%
group_by(PRIOR) %>%
slice(1) %>%
ungroup() %>%
distinct(BAS_DD) %>%
arrange(desc(BAS_DD)) %>%
filter(BAS_DD<20241231, BAS_DD>20200101)
# 2-3. 데이터 전처리 : KRX 정보데이터시스템 K200 및 V-K200지수 전처리
idx_data <- idx_raw %>%
arrange(BAS_DD) %>%
mutate(LAG_K200=lag(KOSPI200),
LAG_VK200=lag(VKOSPI200))
K200_portfolio=idx_data %>%
left_join(mmf_raw, by="BAS_DD") %>%
mutate(RATE=(KOSPI200-LAG_K200)/LAG_K200,
YEAR = substr(BAS_DD, 1, 4),
YM = ym(substr(BAS_DD, 1, 6))) %>%
group_by(YEAR, YM) %>%
summarise(RATE_K200 = if_else(is.na(prod(1 + RATE)),0,prod(1 + RATE)),
MMF = mean(MMF)/100,
.groups = "drop") %>%
ungroup()
# 3-1. 포트폴리오 구성 : VW양매도 포트폴리오 기초정보 생성
target_info <- target_date %>%
left_join(options, by="BAS_DD") %>%
distinct(BAS_DD,PRIOR) %>%
arrange(desc(BAS_DD),PRIOR) %>%
group_by(BAS_DD) %>%
# 만기가 도래하는 옵션을 제외하고 우선순위가 높은 옵션 선택
slice(2) %>%
ungroup() %>%
arrange(desc(BAS_DD)) %>%
left_join(idx_data, by="BAS_DD") %>%
left_join(mmf_raw, by="BAS_DD") %>%
# 옵션 보유기간 및 단기금리(MMF) 계산
mutate(DIFF_DAY=as.integer(ymd(lag(BAS_DD))-ymd(BAS_DD)),
MMF=MMF*0.01) %>%
# 옵션 보유기간에 해당하는 시장기대변동성 계산(V-K200활용)
mutate(VOL=LAG_VK200*sqrt(DIFF_DAY)/sqrt(365)/100) %>%
# 변동성에 따른 옵션 행사가격 상단(2.5단위 올림) 및 하단(2.5단위 내림) 계산
mutate(TARGET_C_K=ceiling(KOSPI200*(1+VOL)*0.4)/0.4,
TARGET_P_K=floor(KOSPI200*(1-VOL)*0.4)/0.4) %>%
drop_na(DIFF_DAY) %>%
select(BAS_DD,VOL,DIFF_DAY,MMF,KOSPI200,LAG_VK200,PRIOR,TARGET_C_K,TARGET_P_K)
# 3-2. 포트폴리오 구성 : VW양매도 포트폴리오 거래대상 옵션 정보 생성
target_options <- target_info %>%
select(BAS_DD, PRIOR, TARGET_C_K, TARGET_P_K) %>%
pivot_longer(cols=c("TARGET_C_K","TARGET_P_K"),names_to = "GRP", values_to = "EXER_PRC") %>%
mutate(RGHT=substr(GRP,8,8)) %>%
left_join(options,by=c("BAS_DD","PRIOR","RGHT","EXER_PRC")) %>%
select(BAS_DD,GRP,PRICE,ACC_TRDVOL) %>%
pivot_wider(names_from = "GRP", values_from = c("PRICE","ACC_TRDVOL"))
# 원금 100억원 가정
cash = 10000*10000*100
# 4. 포트폴리오 구현 : VW양매도 전략을 구현하여 일자별 손익 계산
portfolio <- target_info %>%
left_join(target_options,by="BAS_DD") %>%
arrange(BAS_DD) %>%
# 원금에 따른 옵션 매도수량 계산
mutate(SELL_AMT=cash/250000/KOSPI200) %>%
# 옵션 프리미엄(매도수익)) 계산
mutate(PREMIUM=SELL_AMT*(PRICE_TARGET_C_K+PRICE_TARGET_P_K)*250000) %>%
# 원금 및 프리미엄의 MMF 이자수익 및 권리행사손실 계산
mutate(INTEREST=(cash+replace_na(PREMIUM,0))*MMF*DIFF_DAY/365,
EXERCISE=(if_else(lead(KOSPI200)-TARGET_C_K>0,lead(KOSPI200)-TARGET_C_K,0)+
if_else(TARGET_P_K-lead(KOSPI200)>0,TARGET_P_K-lead(KOSPI200),0))*250000*SELL_AMT) %>%
# 주단위 포트폴리오 손익 계산(원금 100억 가정, 당일 투자시 다음주 실현손익을 의미)
mutate(REVENUE=PREMIUM+INTEREST-EXERCISE) %>%
# 거래대상 옵션이 상장되어있지 않은 경우, MMF수익만 고려
mutate(REVENUE=if_else(is.na(REVENUE),INTEREST,REVENUE)) %>%
mutate(RATE=REVENUE/cash)  # 주단위 포트폴리오 수익률
# 5. 비교군 포트폴리오 생성 : 월별 5% OTM 양매도 전략
options2 <- options %>%
filter(PROD=="코스피200")
# 옵션 만기일(매달) 생성
target_date2 <- options2 %>%
distinct(.,BAS_DD, PRIOR) %>%
arrange(PRIOR, desc(BAS_DD)) %>%
group_by(PRIOR) %>%
slice(1) %>%
ungroup() %>%
distinct(BAS_DD) %>%
arrange(desc(BAS_DD)) %>%
filter(BAS_DD<20241231, BAS_DD>20200101)
# 일반 양매도 포트폴리오 기본 정보 생성
target_info2 <- target_date2 %>%
left_join(options2, by="BAS_DD") %>%
distinct(BAS_DD,PRIOR) %>%
arrange(desc(BAS_DD),PRIOR) %>%
group_by(BAS_DD) %>%
# 만기가 도래하는 옵션을 제외하고 우선순위가 높은 옵션 선택
slice(2) %>%
ungroup() %>%
arrange(desc(BAS_DD)) %>%
left_join(idx_data, by="BAS_DD") %>%
left_join(mmf_raw, by="BAS_DD") %>%
# 옵션 보유기간 및 단기금리(MMF) 계산
mutate(DIFF_DAY=as.integer(ymd(lag(BAS_DD))-ymd(BAS_DD)),
MMF=MMF*0.01,
VOL=0.05) %>%
# 변동성에 따른 옵션 행사가격 상단(2.5단위 올림) 및 하단(2.5단위 내림) 계산
mutate(TARGET_C_K=ceiling(KOSPI200*(1+VOL)*0.4)/0.4,
TARGET_P_K=floor(KOSPI200*(1-VOL)*0.4)/0.4) %>%
mutate(DIFF_DAY=if_else(is.na(DIFF_DAY),28,DIFF_DAY)) %>%
select(BAS_DD,VOL,DIFF_DAY,MMF,KOSPI200,LAG_VK200,PRIOR,TARGET_C_K,TARGET_P_K)
# 일반 양매도 포트폴리오 거래대상 옵션
target_options2 <- target_info2 %>%
select(BAS_DD, PRIOR, TARGET_C_K, TARGET_P_K) %>%
pivot_longer(cols=c("TARGET_C_K","TARGET_P_K"),names_to = "GRP", values_to = "EXER_PRC") %>%
mutate(RGHT=substr(GRP,8,8)) %>%
left_join(options2,by=c("BAS_DD","PRIOR","RGHT","EXER_PRC")) %>%
select(BAS_DD,GRP,PRICE,ACC_TRDVOL) %>%
pivot_wider(names_from = "GRP", values_from = c("PRICE","ACC_TRDVOL"))
# 일반 양매도 포트폴리오 구현
portfolio2 <- target_info2 %>%
left_join(target_options2,by="BAS_DD") %>%
arrange(BAS_DD) %>%
# 원금에 따른 옵션 매도수량 계산
mutate(SELL_AMT=cash/250000/KOSPI200) %>%
# 옵션 프리미엄(매도수익)) 계산
mutate(PREMIUM=SELL_AMT*(PRICE_TARGET_C_K+PRICE_TARGET_P_K)*250000) %>%
# 원금 및 프리미엄의 MMF 이자수익 및 권리행사손실 계산
mutate(INTEREST=(cash+replace_na(PREMIUM,0))*MMF*DIFF_DAY/365,
EXERCISE=(if_else(lead(KOSPI200)-TARGET_C_K>0,lead(KOSPI200)-TARGET_C_K,0)+
if_else(TARGET_P_K-lead(KOSPI200)>0,TARGET_P_K-lead(KOSPI200),0))*250000*SELL_AMT) %>%
mutate(EXERCISE=if_else(is.na(EXERCISE),0,EXERCISE)) %>%
# 주단위 포트폴리오 손익 계산(원금 100억 가정, 당일 투자시 다음주 실현손익을 의미)
mutate(REVENUE=PREMIUM+INTEREST-EXERCISE) %>%
# 거래대상 옵션이 상장되어있지 않은 경우, MMF수익만 고려
mutate(REVENUE=if_else(is.na(REVENUE),INTEREST,REVENUE)) %>%
mutate(RATE=REVENUE/cash) # 주단위 포트폴리오 수익률
write_csv(portfolio,"portfolio.csv")
write_csv(portfolio2,"portfolio2.csv")
